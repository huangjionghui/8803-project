#include "typedef_BT.h"

#define PLATFORM_NONE	0
#define PLATFORM_PC		1
#define PLATFORM_8202T	2
#define PLATFORM_3890	3

#if 0
#define BT_CMD_SET_COORDIWISE	0
#define BT_CMD_SET_COLLEX		1

#define BT_CMD_SET BT_CMD_SET_COLLEX
//#define  DFU_DEBUG
#define  PLATFORM PLATFORM_3890
//#define IGNORE_RX_LOSE

#if	(BT_CMD_SET == BT_CMD_SET_COORDIWISE) 
	#define BT_CMD_QUERY_VERSION		"qf"
	#define BT_CMD_DO_DFU				"du"
	#define BT_CMD_QUERY_VERSION_LEN	2
	#define BT_CMD_DO_DFU_LEN			2
#elif (BT_CMD_SET == BT_CMD_SET_COLLEX) 
	#define BT_CMD_QUERY_VERSION		"i"
	#define BT_CMD_DO_DFU				"r1"
	#define BT_CMD_QUERY_VERSION_LEN	1
	#define BT_CMD_DO_DFU_LEN			2
#endif
#endif

enum{
	BT_CMD_SET_COORDIWISE = 0,
	BT_CMD_SET_COLLEX,
	BT_CMD_SET_FLC,
	BT_CMD_SET_GOC,
	BT_CMD_SET_DEG
};

extern U8 BT_CMD_QUERY_VERSION[10];
extern U8 BT_CMD_DO_DFU[10];
extern U8 BT_CMD_POWER_ON[10];
extern U8 BT_CMD_QUERY_VERSION_LEN;
extern U8 BT_CMD_DO_DFU_LEN;
extern U8 BT_CMD_POWER_ON_LEN;


//#define DFU_MAX_TRANSFER_SIZE		1024
#define SYSTEM_POLLING_INTERVAL_BY_MS	1	// 10 ms :FOR ZhongHong Z8202T
												// 5 ms : For SoundMax 3890

typedef struct _DFU_data_tag{
	U32	fileSize;	// totoal file lenght
	U32	fileSizeDownloaded;	// the offset address this download begin...
	U32	PollTimeout;
	U32 generalTimer;
	U32 OrgBaudRate;
	U32 HighSpeedBaudRate;
	U16 TransferSizePerBlock;
	U16	curBlock;	// which DFU-block would download
	U16	curStage;
	U16	oldStage;
	U16	curEvent;
	U16 	ErrCode;
	U16 	AdvErrCode;
	U16	DFU_MAX_TRANSFER_SIZE;
	U8	curCmd;
	U8 ExpectResponseProtocol;
	U8	BaudRateDetect;
	//U8	bResendPacket;
	U8	bAckPending;

	U8 CmdType;

	U8 *UARTRawBuffer;
}DFU_Data;

enum {
	BAUDRATE_LOW_BAUDRATE_DETECTING = 0,
	BAUDRATE_LOW_BAUDRATE_DETECTED,
	BAUDRATE_HIGH_BAUDRATE_DETECTING,
	BAUDRATE_HIGH_BAUDRATE_DETECTED
};

enum{
	UPGRADE_STAGE_IDLE=0,
	UPGRADE_STAGE_IDLE_SYNC_RECIEVED,
	UPGRADE_STAGE_IDLE_CONF_RECIEVED,
	UPGRADE_STAGE_MODIFY_VM_DISABLE,
	UPGRADE_STAGE_MODIFY_INITIAL_BOOTMODE,
	UPGRADE_STAGE_MODIFY_BAUDRATE,
	UPGRADE_STAGE_RUNTIMEMODE_READY,
	UPGRADE_STAGE_RUNTIMEMODE_GET_DEVICE_INFO,
	UPGRADE_STAGE_RUNTIMEMODE_GET_FUNCTION_INFO,
	UPGRADE_STAGE_RUNTIMEMODE_DETACH_OK,
	UPGRADE_STAGE_RUNTIMEMODE_CHANGE_2_DFUMODE,
	UPGRADE_STAGE_RUNTIMEMODE_CHANGE_2_DFUMODE_SYNC_RECIEVED,
	UPGRADE_STAGE_RUNTIMEMODE_CHANGE_2_DFUMODE_CONF_RECIEVED,
	UPGRADE_STAGE_DFUMODE_READY,
	UPGRADE_STAGE_DFUMODE_GET_DEVICE_INFO,
	UPGRADE_STAGE_DFUMODE_GET_FUNCTION_INFO,
	UPGRADE_STAGE_DFUMODE_READY_DOWNLOAD,
	UPGRADE_STAGE_DFUMODE_DOWNLOAD_SYNC,
	UPGRADE_STAGE_DFUMODE_DOWNLOAD_SYNC_TIMEOUT,
	UPGRADE_STAGE_DFUMODE_PURE_DATA_DOWNLOAD_FINISH,
	UPGRADE_STAGE_DFUMODE_MANIFEST_SYNC,
	UPGRADE_STAGE_DFUMODE_MANIFEST_SYNC_TIMEOUT,
	UPGRADE_STAGE_DFUMODE_DOWNLOAD_COMPLETE,
	UPGRADE_STAGE_DFUMODE_FINISH_WAIT_BCSP_LE,
	UPGRADE_STAGE_DFUMODE_FINISH_WAIT_BCSP_LE_SYNC_RECIEVED,
	UPGRADE_STAGE_DFUMODE_FINISH_WAIT_BCSP_LE_CONF_RECIEVED,
	UPGRADE_STAGE_RESTORE_VM_DISABLE,
	UPGRADE_STAGE_RESTORE_INITIAL_BOOTMODE,
	UPGRADE_STAGE_RESTORE_BAUDRATE,
	UPGRADE_STAGE_ALL_PROCESS_DONE,
	UPGRADE_STAGE_ALL_PROCESS_DONE_SYNC_RECIEVED,
	UPGRADE_STAGE_ALL_PROCESS_DONE_CONF_RECIEVED,
	UPGRADE_STAGE_ALL_PROCESS_DONE_TRY_RESET_AGAIN,
	UPGRADE_STAGE_ALL_PROCESS_DONE_TRY_RESET_OK,
	UPGRADE_STAGE_ERROR
};

enum{
	UPGRADE_EVENT_NO_EVENT = 0,
	UPGRADE_EVENT_BCSP_ACK_RECIEVED,
	UPGRADE_EVENT_BCSP_LE_SYNC_RECIEVED,
	UPGRADE_EVENT_BCSP_LE_CONF_RECIEVED,
	UPGRADE_EVENT_MODIFY_VM_DISABLE_OK,
	UPGRADE_EVENT_MODIFY_INITIAL_BOOTMODE_OK,
	UPGRADE_EVENT_MODIFY_BAUDRATE_OK,
	UPGRADE_EVENT_DFU_GETDEVICE_RESP,
	UPGRADE_EVENT_DFU_GETFUNCTION_RESP,
	UPGRADE_EVENT_DFU_DETACH_RESP,
	UPGRADE_EVENT_DFU_RESET_RESP,
	UPGRADE_EVENT_DFU_GETSTATUS_RESP_STATE_dfuIDLE,
	UPGRADE_EVENT_DFU_GETSTATUS_RESP_STATE_dfuDNLOAD_IDLE,
	UPGRADE_EVENT_DFU_DOWNLOAD_RESP,
	UPGRADE_EVENT_DFU_POLLTIMEOUT,
	UPGRADE_EVENT_RESTORE_VM_DISABLE_OK,
	UPGRADE_EVENT_RESTORE_INITIAL_BOOTMODE_OK,
	UPGRADE_EVENT_RESTORE_BAUDRATE_OK,
	UPGRADE_EVENT_RECEIVED_ODOA,
	UPGRADE_EVENT_TIMER_TIMEOUT,
	UPGRADE_EVENT_ERROR,
	UPGRADE_EVENT_REDO
};

enum {
	err_NO_ERROR = 0,
	err_FLOWCONTROL_WRONG_STAGE,
	err_FLOWCONTROL_UNKNOWN_STAGE,
	err_FLOWCONTROL_CHECK_BDA_FAIL,
	err_FLOWCONTROL_CHECK_SECU_FAIL,
	err_FLOWCONTROL_CANNOT_DETECT_BAUDRATE,
	err_FLOWCONTROL_CANNOT_BCSPLE_AFTER_BAUDRATE_SPEEDUP,
	err_FLOWCONTROL_CANNOT_BCSPLE_AFTER_BAUDRATE_SPEEDDOWN,
	err_FLOWCONTROL_CANNOT_SET_HIGHSPEED_BAUDRATE_REG,	// Set BaudRate Config Register Error
	err_FLOWCONTROL_CANNOT_SET_ORGSPEED_BAUDRATE_REG,	// Set BaudRate Config Register Error
	err_FLOWCONTROL_END,

	//===============================================

	err_BCSP_BASE = 0x0100,



	err_BCSP_END,

	//===============================================

	err_BCCMD_BASE = 0x0200,
		
	// Represent the BCCMD status error
	err_BCCMD_STATUS_NO_SUCH_VARID,
	err_BCCMD_STATUS_TOO_BIG,
	err_BCCMD_STATUS_NO_VALUE,
	err_BCCMD_STATUS_BAD_REQ,
	err_BCCMD_STATUS_NO_ACCESS,
	err_BCCMD_STATUS_READ_ONLY,
	err_BCCMD_STATUS_WRITE_ONLY,
	err_BCCMD_STATUS_ERROR,
	err_BCCMD_STATUS_PERMISSION_DENIED,
	//---end of---  Represent the BCCMD status error

	err_BCCMD_ERROR_TYPE,
	err_BCCMD_PSKEY_VALUE_TOO_BIG_TO_BUFFER,
	err_BCCMD_PSKEY_PRECHECK_ERROR,
	err_BCCMD_GET_PSKEY_VALUE_NOT_THIS_PSKEY,
	err_BCCMD_GET_PSKEY_LENGTH_NOT_THIS_PSKEY,
	err_BCCMD_SET_PSKEY_VALUE_NOT_THIS_PSKEY,
	err_BCCMD_MISS_LAST_TYPE,
	err_BCCMD_END,

	//===============================================

	err_DFU_BASE = 0x0C00,
	err_DFU_POLLTIME_NOT_SET,
	err_DFU_UNKNOWN_CMD_RESP,

	err_DFU_status_errBase = 0x0C20,
	err_DFU_status_errTARGET,
	err_DFU_status_errFILE,
	err_DFU_status_errWRITE,
	err_DFU_status_errERASE,
	err_DFU_status_errCHECK_ERASED,
	err_DFU_status_errPROG,
	err_DFU_status_errVERIFIY,
	err_DFU_status_errADDRESS,
	err_DFU_status_errNOTDONE,
	err_DFU_status_errFIRMWARE,
	err_DFU_status_errVENDOR,
	err_DFU_status_errUSBR,
	err_DFU_status_errPOR,
	err_DFU_status_errUNKNOWN,
	err_DFU_status_errSTALLEDPKT,	

	err_DFU_state_appIDE  = 0x0C40,
	err_DFU_state_appDETACH,
	err_DFU_state_dfuIDLE,
	err_DFU_state_dfuDNLOAD_SYNC,
	err_DFU_state_dfuDNBUSY,
	err_DFU_state_dfuDNLOAD_IDLE,
	err_DFU_state_dfuMANIFEST_SYNC,
	err_DFU_state_dfuMANIFEST,
	err_DFU_state_dfuMANIFEST_WAIT_RESET,
	err_DFU_state_dfuUPLOAD_IDLE,
	err_DFU_state_dfuERROR,
	
	err_DFU_END
};


void init_DFU(U32 File_size, U32 OrgBaudRate, U32 HighSpeedBaudRate, U16 MAX_PACKET_SIZE, U8 CmdType);
void DFU_WorkFlow(void);
void InteractionByCurStage(void);
void DFU_ERROR_OCCUR(void);
void DoDFU(void);
void OSTimeDly(U16 n);
void setup_DataBuffer(U8 * UARTRawBuf, U8 * BCSPRxBuf, U8 * BCSPTxBuf, U8 * BCSPAckBuf);
void OutPutDebugMSG_BDA(U16 *pBDA);
void OutPutDebugMSG(const U8 *Msg);
void OutPutDebugMSG1(void);
void OutPutDebugMSG_LOST(void);
void OutPutDebugMSG_StageEvent(void);
void OutPutDebugMSG_Ack(U8 isHeaderHealth);
void OutPutDebugMSG_Packet(U8 isHeaderHealth);
void OutPutDebugMSG_SetTimer(void);
void OutPutDebugMSG_TransferLength(void);
void polling_BT_DFU(void);
U8 IsLoseEndEscapeChar(void);
U8 IsDFUDown(void);

// The following Function is Provoided by the various Platform
extern U8 SetBaudRateRegByBaudRate(U32 baudrate);
extern void OSTimeDly(U16 n);	// By ms
extern void InsertDFUFileData(U8 *destAdd, U32 offset, U16 size);
extern void PutChar(U8 ch);
extern U32 GetTimeReg(void);
extern U32 CountTimeInterval(U32 StartTime, U32 EndTime);  // Return by ms


extern DFU_Data	curDFU;
extern U8 wr_point;
extern U8 rd_point;
extern U32 LastRxRecTime;
extern U32 StartDFUTime;
extern U32 LastRxRecTime;
extern U32 timenow;

